# -*- coding: utf-8 -*-
# Generated by Django 1.11.28 on 2020-07-22 13:25
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import osf.migrations.utils.utils
import osf.models.base
import osf.models.spam
import osf.models.validators
import osf.utils.datetime_aware_jsonfield
import osf.utils.fields
import osf.utils.migrations


class Migration(migrations.Migration):

    replaces = [('osf', '0165_osfgroup'), ('osf', '0156_abstractnode_article_doi'), ('osf', '0160_merge_20190408_1618'), ('osf', '0166_merge_20190429_1632'), ('osf', '0167_auto_20190506_1556'), ('osf', '0161_add_spam_fields_to_user'), ('osf', '0168_merge_20190610_2308'), ('osf', '0162_conference_submissions'), ('osf', '0163_populate_conference_submissions'), ('osf', '0169_merge_20190618_1429'), ('osf', '0170_ensure_schemas'), ('osf', '0171_add_registration_files_count'), ('osf', '0172_ensure_schemas'), ('osf', '0173_ensure_schemas'), ('osf', '0174_add_ab_testing_home_page_version_b_flag'), ('osf', '0175_pagecounter_schema'), ('osf', '0176_pagecounter_data'), ('osf', '0177_pagecounter_index'), ('osf', '0178_apioauth2scope_is_public'), ('osf', '0179_apioauth2personaltoken_scopes_temp'), ('osf', '0180_finalize_token_scopes_mig'), ('osf', '0181_osfuser_contacted_deactivation'), ('osf', '0182_add_custom_file_versions_through'), ('osf', '0183_populate_file_versions_through'), ('osf', '0184_remove_basefilenode_versions'), ('osf', '0185_basefilenode_versions'), ('osf', '0186_make_pagecounter_fields_nonnull'), ('osf', '0187_remove_outdated_contributor_permissions'), ('osf', '0188_deleted_field_mig'), ('osf', '0189_deleted_field_data'), ('osf', '0190_add_schema_block_models'), ('osf', '0191_migrate_schemas_to_schemablocks'), ('osf', '0192_add_registation_responses_fields'), ('osf', '0193_migrate_registered_meta'), ('osf', '0191_abstractnode_external_registered_date'), ('osf', '0192_abstractnode_external_registration_boolean'), ('osf', '0194_merge_20191113_1611'), ('osf', '0195_add_enable_chronos_waffle_flag'), ('osf', '0196_update_schemas'), ('osf', '0197_add_ab_testing_home_page_hero_text_version_b_flag'), ('osf', '0198_draft_node_models'), ('osf', '0199_draft_node_permissions'), ('osf', '0200_auto_20200214_1518'), ('osf', '0201_add_egap_flag'), ('osf', '0202_add_sloan'), ('osf', '0203_auto_20200312_1435'), ('osf', '0204_ensure_schemas'), ('osf', '0205_auto_20200323_1850'), ('osf', '0206_auto_20200528_1319'), ('osf', '0207_ensure_schemas'), ('osf', '0207_update_schemas2'), ('osf', '0208_update_EGAP_schema'), ('osf', '0209_conference_auto_check_spam'), ('osf', '0210_branded_registries'), ('osf', '0211_auto_20200709_1320')]

    dependencies = [
        ('osf', '0164_add_guardian_to_nodes'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='OSFGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField()),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='osfgroups_created', to=settings.AUTH_USER_MODEL)),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
            ],
            options={
                'permissions': (('view_group', 'Can view group details'), ('member_group', 'Has group membership'), ('manage_group', 'Can manage group membership')),
            },
        ),
        migrations.CreateModel(
            name='OSFGroupGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.OSFGroup')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OSFGroupUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.OSFGroup')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='osfgroupgroupobjectpermission',
            unique_together=set([('group', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='osfgroupuserobjectpermission',
            unique_together=set([('user', 'permission', 'content_object')]),
        ),
        migrations.CreateModel(
            name='OSFGroupLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('params', osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder)),
                ('should_hide', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-created'],
                'get_latest_by': 'created',
            },
        ),
        migrations.AddField(
            model_name='osfgroup',
            name='last_logged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='osfgrouplog',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='osf.OSFGroup'),
        ),
        migrations.AddField(
            model_name='osfgrouplog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='group_connected_email_records',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='member_added_email_records',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='article_doi',
            field=models.CharField(blank=True, max_length=128, null=True, validators=[osf.models.validators.validate_doi]),
        ),
        osf.utils.migrations.AddWaffleFlags(
            flag_names=['osf_groups'],
            on_for_everyone=False,
        ),
        migrations.AddField(
            model_name='osfuser',
            name='date_last_reported',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='reports',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder, validators=[osf.models.spam._validate_reports]),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='spam_data',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='spam_pro_tip',
            field=models.CharField(blank=True, default=None, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='osfuser',
            name='spam_status',
            field=models.IntegerField(blank=True, db_index=True, default=None, null=True),
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.add_spam_status_to_tagged_users,
            reverse_code=osf.migrations.utils.utils.remove_spam_status_from_tagged_users,
        ),
        migrations.AddField(
            model_name='conference',
            name='submissions',
            field=models.ManyToManyField(related_name='conferences', to='osf.AbstractNode'),
        ),
        migrations.RemoveField(
            model_name='conference',
            name='num_submissions',
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.forward,
            reverse_code=osf.migrations.utils.utils.backward,
        ),
        migrations.RunPython(
            code=osf.utils.migrations.ensure_schemas,
            reverse_code=osf.utils.migrations.ensure_schemas,
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='files_count',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.add_registration_files_count,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=osf.utils.migrations.ensure_schemas,
            reverse_code=osf.utils.migrations.ensure_schemas,
        ),
        migrations.RunPython(
            code=osf.utils.migrations.ensure_schemas,
            reverse_code=osf.utils.migrations.ensure_schemas,
        ),
        osf.utils.migrations.AddWaffleFlags(
            flag_names=['ab_testing_home_page_version_b'],
        ),
        migrations.AddField(
            model_name='pagecounter',
            name='action',
            field=models.CharField(blank=True, max_length=128, null=True),
        ),
        migrations.AddField(
            model_name='pagecounter',
            name='file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pagecounters', to='osf.BaseFileNode'),
        ),
        migrations.AddField(
            model_name='pagecounter',
            name='resource',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pagecounters', to='osf.Guid'),
        ),
        migrations.AddField(
            model_name='pagecounter',
            name='version',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql="\n    UPDATE osf_pagecounter PC\n    SET\n        action = split_part(PC._id, ':', 1),\n        resource_id = Guid.id,\n        file_id = File.id,\n        version = NULLIF(split_part(PC._id, ':', 4), '')::int\n    FROM osf_guid Guid, osf_basefilenode File\n        WHERE\n              Guid._id = split_part(PC._id, ':', 2) AND\n              File._id = split_part(PC._id, ':', 3) AND\n              PC.id in (\n                  select PC.id from osf_pagecounter PC\n                      INNER JOIN osf_guid Guid on Guid._id = split_part(PC._id, ':', 2)\n                      INNER JOIN osf_basefilenode File on File._id = split_part(PC._id, ':', 3)\n                  WHERE (PC.resource_id IS NULL OR PC.file_id IS NULL)\n );",
            reverse_sql="\nUPDATE osf_pagecounter PC\nSET\n    resource_id = NULL,\n    file_id = NULL,\n    version = NULL,\n    action = NULL\nWHERE PC.id IN (\n    SELECT PC.id FROM osf_pagecounter PC\n        INNER JOIN osf_guid Guid on Guid._id = split_part(PC._id, ':', 2)\n        INNER JOIN osf_basefilenode File on File._id = split_part(PC._id, ':', 3)\n );",
        ),
        migrations.RunSQL(
            sql=['CREATE INDEX CONCURRENTLY page_counter_idx ON osf_pagecounter (action, resource_id, file_id, version);'],
            reverse_sql=['DROP INDEX IF EXISTS page_counter_idx, RESTRICT;'],
        ),
        migrations.AddField(
            model_name='apioauth2scope',
            name='is_public',
            field=models.BooleanField(db_index=True, default=True),
        ),
        migrations.AlterField(
            model_name='apioauth2personaltoken',
            name='scopes',
            field=models.CharField(max_length=300, null=True),
        ),
        migrations.AddField(
            model_name='apioauth2personaltoken',
            name='scopes_temp',
            field=models.ManyToManyField(related_name='tokens', to='osf.ApiOAuth2Scope'),
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.migrate_scopes_from_char_to_m2m,
            reverse_code=osf.migrations.utils.utils.remove_m2m_scopes,
        ),
        migrations.RemoveField(
            model_name='apioauth2personaltoken',
            name='scopes',
        ),
        migrations.RenameField(
            model_name='apioauth2personaltoken',
            old_name='scopes_temp',
            new_name='scopes',
        ),
        migrations.AddField(
            model_name='osfuser',
            name='contacted_deactivation',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='BaseFileVersionsThrough',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_name', models.TextField(blank=True)),
                ('basefilenode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.BaseFileNode')),
                ('fileversion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.FileVersion')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='basefileversionsthrough',
            unique_together=set([('basefilenode', 'fileversion')]),
        ),
        migrations.AlterIndexTogether(
            name='basefileversionsthrough',
            index_together=set([('basefilenode', 'fileversion')]),
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.populate_fileversion_name,
            reverse_code=osf.migrations.utils.utils.restore_default_through_table,
        ),
        migrations.RemoveField(
            model_name='basefilenode',
            name='versions',
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='versions',
            field=models.ManyToManyField(through='osf.BaseFileVersionsThrough', to='osf.FileVersion'),
        ),
        migrations.AlterField(
            model_name='pagecounter',
            name='action',
            field=models.CharField(max_length=128),
        ),
        migrations.AlterField(
            model_name='pagecounter',
            name='file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pagecounters', to='osf.BaseFileNode'),
        ),
        migrations.AlterField(
            model_name='pagecounter',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pagecounters', to='osf.Guid'),
        ),
        migrations.RemoveField(
            model_name='contributor',
            name='admin',
        ),
        migrations.RemoveField(
            model_name='contributor',
            name='read',
        ),
        migrations.RemoveField(
            model_name='contributor',
            name='write',
        ),
        migrations.RemoveField(
            model_name='institutionalcontributor',
            name='admin',
        ),
        migrations.RemoveField(
            model_name='institutionalcontributor',
            name='read',
        ),
        migrations.RemoveField(
            model_name='institutionalcontributor',
            name='write',
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='basefilenode',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='comment',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='privatelink',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='institution',
            name='deleted',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql='UPDATE osf_basefilenode SET deleted = deleted_on\n    WHERE id IN (SELECT id FROM osf_basefilenode WHERE deleted_on IS NOT NULL AND deleted IS NULL);',
            reverse_sql='UPDATE osf_basefilenode SET deleted = null',
        ),
        migrations.RunSQL(
            sql='UPDATE osf_institution SET deleted=modified\nWHERE id IN (SELECT id FROM osf_institution WHERE is_deleted AND deleted IS NULL);',
            reverse_sql='UPDATE osf_institution SET deleted = null',
        ),
        migrations.RunSQL(
            sql='UPDATE osf_abstractnode SET deleted = CASE WHEN deleted_date IS NOT NULL THEN deleted_date ELSE last_logged END\n    WHERE id IN (SELECT id FROM osf_abstractnode WHERE is_deleted AND deleted IS NULL);',
            reverse_sql='UPDATE osf_abstractnode SET deleted = null',
        ),
        migrations.RunSQL(
            sql='UPDATE osf_privatelink SET deleted=modified\nWHERE id IN (SELECT id FROM osf_privatelink WHERE is_deleted AND deleted IS NULL);',
            reverse_sql='UPDATE osf_privatelink SET deleted = null',
        ),
        migrations.RunSQL(
            sql='UPDATE osf_comment SET deleted=modified\nWHERE id IN (SELECT id FROM osf_comment WHERE is_deleted AND deleted IS NULL);',
            reverse_sql='UPDATE osf_comment SET deleted = null',
        ),
        migrations.CreateModel(
            name='RegistrationSchemaBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('_id', models.CharField(db_index=True, default=osf.models.base.generate_object_id, max_length=24, unique=True)),
                ('help_text', models.TextField()),
                ('example_text', models.TextField(null=True)),
                ('registration_response_key', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('schema_block_group_key', models.CharField(db_index=True, max_length=24, null=True)),
                ('block_type', models.CharField(choices=[('page-heading', 'page-heading'), ('section-heading', 'section-heading'), ('subsection-heading', 'subsection-heading'), ('paragraph', 'paragraph'), ('question-label', 'question-label'), ('short-text-input', 'short-text-input'), ('long-text-input', 'long-text-input'), ('file-input', 'file-input'), ('contributors-input', 'contributors-input'), ('single-select-input', 'single-select-input'), ('multi-select-input', 'multi-select-input'), ('select-input-option', 'select-input-option'), ('select-other-option', 'select-other-option')], db_index=True, max_length=31)),
                ('display_text', models.TextField()),
                ('required', models.BooleanField(default=False)),
            ],
        ),
        migrations.AddField(
            model_name='registrationschema',
            name='config',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='registrationschema',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='registrationschemablock',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schema_blocks', to='osf.RegistrationSchema'),
        ),
        migrations.AlterUniqueTogether(
            name='registrationschemablock',
            unique_together=set([('schema', 'registration_response_key')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='registrationschemablock',
            order_with_respect_to='schema',
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.remove_version_1_schemas,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.update_schemaless_registrations,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.update_schema_configs,
            reverse_code=osf.migrations.utils.utils.unset_schema_configs,
        ),
        migrations.RunPython(
            code=osf.utils.migrations.map_schemas_to_schemablocks,
            reverse_code=osf.utils.migrations.unmap_schemablocks,
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registration_responses',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='registration_responses_migrated',
            field=models.NullBooleanField(db_index=True, default=True),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registration_responses',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(blank=True, default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='registration_responses_migrated',
            field=models.NullBooleanField(db_index=True, default=True),
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.migrate_draft_registration_metadata,
            reverse_code=osf.migrations.utils.utils.clear_draft_registration_responses,
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.migrate_registration_registered_meta,
            reverse_code=osf.migrations.utils.utils.clear_registration_responses,
        ),
        migrations.AddField(
            model_name='abstractnode',
            name='external_registration',
            field=models.NullBooleanField(default=False),
        ),
        osf.utils.migrations.AddWaffleFlags(
            flag_names=['enable_chronos'],
        ),
        osf.utils.migrations.UpdateRegistrationSchemasAndSchemaBlocks(
        ),
        migrations.RunPython(
            code=osf.utils.migrations.make_egap_active_but_invisible,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        osf.utils.migrations.AddWaffleFlags(
            flag_names=['ab_testing_home_page_hero_text_version_b'],
        ),
        osf.utils.migrations.DeleteWaffleFlags(
            flag_names=['ab_testing_home_page_version_b'],
        ),
        migrations.CreateModel(
            name='DraftRegistrationContributor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='DraftRegistrationGroupObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DraftRegistrationUserObjectPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DraftNode',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('osf.abstractnode',),
        ),
        migrations.AlterModelOptions(
            name='draftregistration',
            options={'permissions': (('read_draft_registration', 'Can read the draft registration'), ('write_draft_registration', 'Can edit the draft registration'), ('admin_draft_registration', 'Can manage the draft registration'))},
        ),
        migrations.AlterModelOptions(
            name='draftregistrationlog',
            options={'get_latest_by': 'created', 'ordering': ['-created']},
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='affiliated_institutions',
            field=models.ManyToManyField(related_name='draft_registrations', to='osf.Institution'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='category',
            field=models.CharField(blank=True, choices=[(b'', b'Uncategorized'), (b'communication', b'Communication'), (b'hypothesis', b'Hypothesis'), (b'data', b'Data'), (b'instrumentation', b'Instrumentation'), (b'methods and measures', b'Methods and Measures'), (b'analysis', b'Analysis'), (b'project', b'Project'), (b'other', b'Other'), (b'procedure', b'Procedure'), (b'software', b'Software')], default=b'', max_length=255),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='description',
            field=models.TextField(blank=True, default=b''),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='last_logged',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='node_license',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='draft_registrations', to='osf.NodeLicenseRecord'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='draftregistrations', to='osf.Subject'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='tags',
            field=models.ManyToManyField(related_name='draftregistration_tagged', to='osf.Tag'),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='title',
            field=models.TextField(blank=True, default=b'', validators=[osf.models.validators.validate_title]),
        ),
        migrations.AddField(
            model_name='draftregistrationlog',
            name='params',
            field=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONField(default=dict, encoder=osf.utils.datetime_aware_jsonfield.DateTimeAwareJSONEncoder),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='type',
            field=models.CharField(choices=[('osf.node', 'node'), ('osf.draftnode', 'draft node'), ('osf.registration', 'registration'), ('osf.quickfilesnode', 'quick files node')], db_index=True, max_length=255),
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='branched_from',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='registered_draft', to='osf.AbstractNode'),
        ),
        migrations.AlterField(
            model_name='draftregistrationlog',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.DraftRegistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission'),
        ),
        migrations.AddField(
            model_name='draftregistrationuserobjectpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.DraftRegistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group'),
        ),
        migrations.AddField(
            model_name='draftregistrationgroupobjectpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Permission'),
        ),
        migrations.AddField(
            model_name='draftregistrationcontributor',
            name='draft_registration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='osf.DraftRegistration'),
        ),
        migrations.AddField(
            model_name='draftregistrationcontributor',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='draftregistration',
            name='_contributors',
            field=models.ManyToManyField(related_name='draft_registrations', through='osf.DraftRegistrationContributor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationuserobjectpermission',
            unique_together=set([('user', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationgroupobjectpermission',
            unique_together=set([('group', 'permission', 'content_object')]),
        ),
        migrations.AlterUniqueTogether(
            name='draftregistrationcontributor',
            unique_together=set([('user', 'draft_registration')]),
        ),
        migrations.AlterOrderWithRespectTo(
            name='draftregistrationcontributor',
            order_with_respect_to='draft_registration',
        ),
        migrations.RunPython(
            code=osf.migrations.utils.utils.post_migrate_signal,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunSQL(
            sql="\n    INSERT INTO auth_group (name)\n    SELECT regexp_split_to_table('draft_registration_' || D.id || '_read,draft_registration_' || D.id || '_write,draft_registration_' || D.id || '_admin', ',')\n    FROM osf_draftregistration D;\n    ",
            reverse_sql="\n    DELETE FROM osf_osfuser_groups\n    WHERE group_id IN (\n    SELECT id FROM auth_group WHERE name LIKE '%draft_registration_%'\n    );\n\n    DELETE FROM auth_group WHERE name in\n    (SELECT regexp_split_to_table('draft_registration_' || D.id || '_read,draft_registration_' || D.id || '_write,draft_registration_' || D.id || '_admin', ',')\n    FROM osf_draftregistration D);\n    ",
        ),
        migrations.RunSQL(
            sql='\n    -- Adds "read_draft_registration" permissions to all Draft Reg read groups - uses DraftRegistrationGroupObjectPermission table\n    INSERT INTO osf_draftregistrationgroupobjectpermission (content_object_id, group_id, permission_id)\n    SELECT D.id as content_object_id, G.id as group_id, PERM.id AS permission_id\n    FROM osf_draftregistration AS D, auth_group G, auth_permission AS PERM\n    WHERE G.name = \'draft_registration_\' || D.id || \'_read\'\n    AND PERM.codename = \'read_draft_registration\';\n\n    -- Adds "read_draft_registration" and "write_draft_registration" permissions to all Draft Reg write groups\n    INSERT INTO osf_draftregistrationgroupobjectpermission (content_object_id, group_id, permission_id)\n    SELECT D.id as content_object_id, G.id as group_id, PERM.id AS permission_id\n    FROM osf_draftregistration AS D, auth_group G, auth_permission AS PERM\n    WHERE G.name = \'draft_registration_\' || D.id || \'_write\'\n    AND (PERM.codename = \'read_draft_registration\' OR PERM.codename = \'write_draft_registration\');\n\n    -- Adds "read_draft_registration", "write_draft_registration", and "admin_draft_registration" permissions to all Draft Reg admin groups\n    INSERT INTO osf_draftregistrationgroupobjectpermission (content_object_id, group_id, permission_id)\n    SELECT D.id as content_object_id, G.id as group_id, PERM.id AS permission_id\n    FROM osf_draftregistration AS D, auth_group G, auth_permission AS PERM\n    WHERE G.name = \'draft_registration_\' || D.id || \'_admin\'\n    AND (PERM.codename = \'read_draft_registration\' OR PERM.codename = \'write_draft_registration\' OR PERM.codename = \'admin_draft_registration\');\n    ',
            reverse_sql='\n    DELETE FROM osf_draftregistrationgroupobjectpermission;\n    ',
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='category',
            field=models.CharField(blank=True, choices=[('analysis', 'Analysis'), ('communication', 'Communication'), ('data', 'Data'), ('hypothesis', 'Hypothesis'), ('instrumentation', 'Instrumentation'), ('methods and measures', 'Methods and Measures'), ('procedure', 'Procedure'), ('project', 'Project'), ('software', 'Software'), ('other', 'Other'), ('', 'Uncategorized')], default='', max_length=255),
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='description',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='draftregistration',
            name='title',
            field=models.TextField(blank=True, default='', validators=[osf.models.validators.validate_title]),
        ),
        osf.utils.migrations.AddWaffleFlags(
            flag_names=['egap_admins'],
            on_for_everyone=None,
        ),
        migrations.RunPython(
            code=osf.utils.migrations.add_sloan_flags_and_groups,
            reverse_code=osf.utils.migrations.remove_sloan_flags_and_groups,
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='in_sloan_study',
            field=models.NullBooleanField(default=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='conflict_of_interest_statement',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='data_links',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.URLField(blank=True, null=True), blank=True, null=True, size=None),
        ),
        migrations.AddField(
            model_name='preprint',
            name='has_coi',
            field=models.NullBooleanField(),
        ),
        migrations.AddField(
            model_name='preprint',
            name='has_data_links',
            field=models.TextField(blank=True, choices=[('available', 'Available'), ('no', 'No'), ('not_applicable', 'Not applicable')], null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='has_prereg_links',
            field=models.TextField(blank=True, choices=[('available', 'Available'), ('no', 'No'), ('not_applicable', 'Not applicable')], null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='prereg_link_info',
            field=models.TextField(blank=True, choices=[('prereg_designs', 'Pre-registration of study designs'), ('prereg_analysis', 'Pre-registration of study analysis'), ('prereg_both', 'Pre-registration of study designs and study analysis')], null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='prereg_links',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.URLField(blank=True, null=True), blank=True, null=True, size=None),
        ),
        migrations.AddField(
            model_name='preprint',
            name='why_no_data',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='preprint',
            name='why_no_prereg',
            field=models.TextField(blank=True, null=True),
        ),
        osf.utils.migrations.UpdateRegistrationSchemasAndSchemaBlocks(
        ),
        migrations.AlterModelOptions(
            name='institution',
            options={'permissions': (('view_institution', 'Can view institution details'), ('view_institutional_metrics', 'Can access metrics endpoints for their Institution'))},
        ),
        migrations.AddField(
            model_name='osfuser',
            name='department',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='abstractnode',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registrations', to='osf.RegistrationProvider'),
        ),
        osf.utils.migrations.UpdateRegistrationSchemasAndSchemaBlocks(
        ),
        osf.utils.migrations.UpdateRegistrationSchemasAndSchemaBlocks(
        ),
        migrations.RunPython(
            code=osf.utils.migrations.make_egap_active_but_invisible,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        osf.utils.migrations.UpdateRegistrationSchemasAndSchemaBlocks(
        ),
        migrations.AddField(
            model_name='conference',
            name='auto_check_spam',
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('hero_logo_image', models.URLField()),
                ('topnav_logo_image', models.URLField()),
                ('hero_background_image', models.URLField()),
                ('primary_color', models.CharField(max_length=7)),
                ('secondary_color', models.CharField(max_length=7)),
            ],
            options={
                'abstract': False,
                'permissions': (('view_brand', 'Can view brand details'), ('modify_brand', 'Can modify brands')),
            },
            bases=(models.Model, osf.models.base.QuerySetExplainMixin),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='advertises_on_discovery',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='branded_discovery_page',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='has_landing_page',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='abstractprovider',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='providers', to='osf.Brand'),
        ),
        migrations.AlterField(
            model_name='osfuser',
            name='date_last_login',
            field=osf.utils.fields.NonNaiveDateTimeField(blank=True, db_index=True, null=True),
        ),
    ]
